/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.nhom11.iotapp.components;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import javax.swing.Icon;
import javax.swing.ImageIcon;

/**
 *
 * @author DELL
 */
public class ImagePanel extends javax.swing.JPanel {

    /**
     * Creates new form ImagePanel
     */
    private boolean Fit;

    public boolean isFit() {
        return Fit;
    }

    public void setFit(boolean Fit) {
        this.Fit = Fit;
    }
    private Icon image;

    public ImagePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setOpaque(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @return the image
     */
    public Icon getImage() {
        return image;
    }

    @Override
    protected void paintComponent(Graphics g) {
        if (image != null) {
            Rectangle imageLocation = getCenterLocation(image);
            Graphics2D g2 = (Graphics2D) g;
            g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            g2.drawImage(toImage(), (int) imageLocation.getX(), (int) imageLocation.getY(), (int) imageLocation.getWidth(), (int) imageLocation.getHeight(), null);
        }
        super.paintComponent(g); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody
    }

    public Image toImage() {
        return ((ImageIcon) image).getImage();
    }

    /**
     * @param image the image to set
     */
    public void setImage(Icon image) {
        this.image = image;
    }

    private Rectangle getCenterLocation(Icon image) {
        int componentWidth = getWidth();
        int componentHeight = getHeight();
        int imageWidth = image.getIconWidth();
        int imageHeight = image.getIconHeight();

        float dx = (float) (componentWidth * 1.0 / imageWidth);
        float dy = (float) (componentHeight * 1.0 / imageHeight);
        float d;

        if (Fit) {
            d = Math.min(dx, dy);
        } else {
            d = Math.max(dx, dy);
        }

        // Adjust the width and height after scaling
        imageWidth = Math.round(imageWidth * d);
        imageHeight = Math.round(imageHeight * d);

        // Calculate the x and y coordinates for centering the image
        int x = (componentWidth - imageWidth) / 2;
        int y = (componentHeight - imageHeight) / 2;

        return new Rectangle(x, y, imageWidth, imageHeight);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
